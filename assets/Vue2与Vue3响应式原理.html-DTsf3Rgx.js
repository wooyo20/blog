import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-C5EyrAIh.js";const t={},p=e(`<h2 id="vue2响应式原理" tabindex="-1"><a class="header-anchor" href="#vue2响应式原理"><span>Vue2响应式原理</span></a></h2><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）</p></li><li><p>数组类型：通过重写更新数组的一系列方法（push、slice、shift、unshift、pop等）来实现拦截</p></li><li><p>存在问题：</p><ul><li><p>新增属性、删除属性使用<code>this.$set(data,key,value)、Vue.set(data,key,value)</code>和<code>this.$delete(data,key,value)、Vue.delete(data,key,value)</code>。否则界面不会更新。</p></li><li><p>直接通过下标修改数组<code>arr[0]=&#39;123&#39;</code>界面不会发生更新。使用数组方法进行更新。</p></li></ul></li></ul><h2 id="vue3响应式原理" tabindex="-1"><a class="header-anchor" href="#vue3响应式原理"><span>Vue3响应式原理</span></a></h2><h3 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy"><span>Proxy</span></a></h3><ul><li>get(target,propKey,receiver)：拦截对象属性的读取</li><li>set(target,propKey,value,receiver)：拦截对象属性的设置</li><li>deleteProperty(target,propKey)：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值</li><li>defineProperty(target, propKey, propDesc)：拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>，返回一个布尔值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span>，
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">//读取</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propKey<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//修改、追加</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//删除</span>
  <span class="token function-variable function">deleteProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

proxy<span class="token punctuation">.</span>name <span class="token comment">// &quot;张三&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect"><span>Reflect</span></a></h3><p>若需要在<code>Proxy</code>内部调用对象的默认行为，建议使用<code>Reflect</code>，其是<code>ES6</code>中操作对象而提供的新 <code>API</code></p><p>基本特点：</p><ul><li>只要<code>Proxy</code>对象具有的代理方法，<code>Reflect</code>对象全部具有，以静态方法的形式存在</li><li>修改某些<code>Object</code>方法的返回结果，让其变得更合理（定义不存在属性行为的时候不报错而是返回<code>false</code>）</li><li>让<code>Object</code>操作都变成函数行为</li></ul><h2 id="ref和reactive函数" tabindex="-1"><a class="header-anchor" href="#ref和reactive函数"><span>ref和reactive函数</span></a></h2><ul><li><p>定义数据</p><ul><li><p>ref用来定义<strong>基本类型数据</strong>（Number、String、Boolean、Undefined、null、symbol）</p></li><li><p>reactive用来定义<strong>对象或数组类型数据</strong></p></li><li><p>ref也可以用来定义对象或数组类型数据，内部会自动通过reactive转为代理对象</p></li></ul></li><li><p>原理</p><ul><li><p>ref通过<code>Object.defineProperty()</code>实现响应式</p></li><li><p>reactive通过<code>Proxy</code>实现响应式，并在内部使用<code>Reflect</code>操作源数据</p></li></ul></li><li><p>使用</p><ul><li><p>ref定义的数据，操作时需要<code>.value</code>，在模板中不需要</p></li><li><p>reactive定义的数据均不需要</p></li></ul></li><li><p>在实际使用中，可以将基本类型包括在对象中，即可使用reactive</p></li></ul><h2 id="vue3-0里为什么要用-proxy-api-替代-defineproperty-api" tabindex="-1"><a class="header-anchor" href="#vue3-0里为什么要用-proxy-api-替代-defineproperty-api"><span>Vue3.0里为什么要用 Proxy API 替代 defineProperty API</span></a></h2><h3 id="defineproperty-api" tabindex="-1"><a class="header-anchor" href="#defineproperty-api"><span>defineProperty API</span></a></h3><p><code>Object.defineProperty</code>只能遍历对象属性进行劫持，存在以下问题</p><ul><li>检测不到对象属性的添加和删除</li><li>数组<code>API</code>方法无法监听到</li><li>需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题</li></ul><p>因此<code>Vue2</code>在实现响应式过程需要实现其他的方法辅助（如重写数组方法、增加额外<code>set</code>、<code>delete</code>方法）</p><h3 id="proxy-api" tabindex="-1"><a class="header-anchor" href="#proxy-api"><span>Proxy API</span></a></h3><p><code>Proxy</code>直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> obj
    <span class="token punctuation">}</span>
    <span class="token comment">// Proxy相当于在对象外层加拦截</span>
    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token comment">//在get之上再进行一层代理，处理嵌套对象</span>
        <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">获取</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">设置</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> res
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">删除</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> res
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> observed
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Vue2与Vue3响应式原理.html.vue"]]),k=JSON.parse(`{"path":"/posts/vue/Vue2%E4%B8%8EVue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html","title":"Vue2与Vue3响应式原理","lang":"zh-CN","frontmatter":{"title":"Vue2与Vue3响应式原理","category":["Vue","Web"],"description":"Vue2响应式原理 对象类型：通过Object.defineProperty()对属性的读取、修改进行拦截（数据劫持） 数组类型：通过重写更新数组的一系列方法（push、slice、shift、unshift、pop等）来实现拦截 存在问题： 新增属性、删除属性使用this.$set(data,key,value)、Vue.set(data,key,v...","head":[["meta",{"property":"og:url","content":"https://wooyo20.github.io/blog/posts/vue/Vue2%E4%B8%8EVue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"wooyo20"}],["meta",{"property":"og:title","content":"Vue2与Vue3响应式原理"}],["meta",{"property":"og:description","content":"Vue2响应式原理 对象类型：通过Object.defineProperty()对属性的读取、修改进行拦截（数据劫持） 数组类型：通过重写更新数组的一系列方法（push、slice、shift、unshift、pop等）来实现拦截 存在问题： 新增属性、删除属性使用this.$set(data,key,value)、Vue.set(data,key,v..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"wooyo20"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2与Vue3响应式原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wooyo20\\",\\"url\\":\\"https://github.com/wooyo20\\"}]}"]]},"headers":[{"level":2,"title":"Vue2响应式原理","slug":"vue2响应式原理","link":"#vue2响应式原理","children":[]},{"level":2,"title":"Vue3响应式原理","slug":"vue3响应式原理","link":"#vue3响应式原理","children":[{"level":3,"title":"Proxy","slug":"proxy","link":"#proxy","children":[]},{"level":3,"title":"Reflect","slug":"reflect","link":"#reflect","children":[]}]},{"level":2,"title":"ref和reactive函数","slug":"ref和reactive函数","link":"#ref和reactive函数","children":[]},{"level":2,"title":"Vue3.0里为什么要用 Proxy API 替代 defineProperty API","slug":"vue3-0里为什么要用-proxy-api-替代-defineproperty-api","link":"#vue3-0里为什么要用-proxy-api-替代-defineproperty-api","children":[{"level":3,"title":"defineProperty API","slug":"defineproperty-api","link":"#defineproperty-api","children":[]},{"level":3,"title":"Proxy API","slug":"proxy-api","link":"#proxy-api","children":[]}]}],"git":{},"readingTime":{"minutes":2.71,"words":814},"filePathRelative":"posts/vue/Vue2与Vue3响应式原理.md","excerpt":"<h2>Vue2响应式原理</h2>\\n<ul>\\n<li>\\n<p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）</p>\\n</li>\\n<li>\\n<p>数组类型：通过重写更新数组的一系列方法（push、slice、shift、unshift、pop等）来实现拦截</p>\\n</li>\\n<li>\\n<p>存在问题：</p>\\n<ul>\\n<li>\\n<p>新增属性、删除属性使用<code>this.$set(data,key,value)、Vue.set(data,key,value)</code>和<code>this.$delete(data,key,value)、Vue.delete(data,key,value)</code>。否则界面不会更新。</p>\\n</li>\\n<li>\\n<p>直接通过下标修改数组<code>arr[0]='123'</code>界面不会发生更新。使用数组方法进行更新。</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{d as comp,k as data};
